@import "./input";
@import "./input.md.vars";
@import "./input.ionic.outline.scss";
@import "../item/item.md.vars.scss";

// Material Design Input
// --------------------------------------------------

:host {
  --border-width: 1px;
  --border-color: #{$item-md-border-color};
  --highlight-color: #9EC4FD;
  --highlight-color-valid: #52A518;
  --highlight-color-invalid: #F72C2C;
  --highlight-color-warning: #CE7A06;

  font-size: $input-md-font-size;
}

@media (any-hover: hover) {
  :host(:hover) {
    --border-color: #939393;
  }
}

.native-wrapper  {
  min-height: 40px;
}

:host-context(.item-label-stacked),
:host-context(.item-label-floating) {
  --padding-top: 8px;
  --padding-bottom: 8px;
  --padding-start: 0;
}

.input-clear-icon ion-icon {
  width: 22px;
  height: 22px;
}

// Input - Size
// ----------------------------------------------------------------

:host(.input-size-large) .native-wrapper {
  height: 48px;
}

:host(.input-size-xlarge) .native-wrapper {
  height: 56px;
}

// Input - Disabled
// ----------------------------------------------------------------
// The input, label, helper text, char counter and placeholder
// should use the same opacity and match the other form controls

:host(.input-disabled) {
  --background: #F5F5F5;
  --border-color: #B8B8B8;

  color: #9A9A9A;
}

:host(.has-focus) {
  outline: 2px solid #9EC4FD;
  outline-offset: 4px;
}

:host(:active) {
  --border-color: #1068EB;
  --border-width: 3px;
}

:host([readonly]) {
  --background: #F5F5F5;
  --border-color: #B8B8B8;

  color: #373737;
}

// Input Bottom
// ----------------------------------------------------------------

/**
 * If the input has a validity state, the
 * border and label should reflect that as a color.
 */
:host(.has-focus.ion-valid),
:host(.ion-touched.ion-invalid),
:host(.ion-touched.ion-warning) {
  --border-color: var(--highlight-color);
}

:host(.ion-touched.ion-warning) {
  --highlight-color: var(--highlight-color-warning);
}

.input-bottom .counter {
  letter-spacing: .0333333333em;
}

// Input Label
// ----------------------------------------------------------------

// :host(.has-focus.input-label-placement-floating.ion-valid) .label-text-wrapper,
// :host(.input-label-placement-floating.ion-touched.ion-invalid) .label-text-wrapper,
// :host(.has-focus.input-label-placement-stacked.ion-valid) .label-text-wrapper,
// :host(.input-label-placement-stacked.ion-touched.ion-invalid) .label-text-wrapper {
//   color: var(--highlight-color);
// }

:host(.ion-valid) .helper-text {
  color: #144B05;
}

:host(.ion-warning) .helper-text {
  color: #6B430C;
}

:host(.ion-invalid) .error-text {
  color: #970606;
}

// Input Highlight
// ----------------------------------------------------------------

.input-highlight {
  @include position(null, null, -1px, 0);

  position: absolute;

  width: 100%;
  height: 2px;

  transform: scale(0);

  transition: transform 200ms;

  background: var(--highlight-color);
}

:host(.has-focus) .input-highlight {
  transform: scale(1);
}

/**
 * Adjust the highlight up by 1px
 * so it is not cut off by the
 * the item's line (if one is present).
 */
:host(.in-item) .input-highlight {
  @include position(null, null, 0, 0);
}

// Input Shape Rounded
// ----------------------------------------------------------------

:host(.input-shape-round) {
  --border-radius: 16px;
}

// Start/End Slots
// ----------------------------------------------------------------

/**
 * Slotted buttons have a lot of default padding that can
 * cause them to look misaligned from other pieces such
 * as the control's label, especially when using a clear
 * fill. We also make them circular to ensure that non-
 * clear buttons and the focus/hover state on clear ones
 * don't look too crowded.
 */
::slotted(ion-button[slot="start"].button-has-icon-only),
::slotted(ion-button[slot="end"].button-has-icon-only) {
  --border-radius: 50%;
  --padding-start: 8px;
  --padding-end: 8px;
  --padding-top: 8px;
  --padding-bottom: 8px;

  aspect-ratio: 1;

  min-height: 40px;
}

// Touch Area
// --------------------------------------------------

:host::after {
  position: absolute;

  top: 50%;
  /* stylelint-disable property-disallowed-list */
  right: 0;
  bottom: 0;
  left: 0;

  min-height: 48px;

  transform: translateY(-50%);

  content: "";

  cursor: pointer;
}
