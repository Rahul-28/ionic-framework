name: 'Test Core Screenshot'
description: 'Test Core Screenshot'
inputs:
  shard:
    description: 'Playwright Test Shard (ex: 2)'
  totalShards:
    description: 'Playwright total number of test shards (ex: 4)'
  update:
    description: 'Whether or not to update the reference snapshots'
  component:
    description: 'The component to update the reference snapshots'

runs:
  using: 'composite'
  steps:
    - uses: actions/setup-node@v3
      with:
        node-version: 18.x
    - uses: ./.github/workflows/actions/download-archive
      with:
        name: ionic-core
        path: ./core
        filename: CoreBuild.zip
    - name: Install Playwright Dependencies
      run: npm install && npx playwright install && npx playwright install-deps
      shell: bash
      working-directory: ./core
    - name: Test
      if: inputs.update != 'true'
      # Screenshots can be updated for all components or specified component(s).
      # If the `component` variable is set, then the test has the option to
      # - run all the instances of the specified component(s) in the `src/components` folder
      # -- For example: if the `component` value is "item", then the following command will be: `npm run test.e2e item`
      # - run the specified file path
      # -- For example: if the `component` value is "src/components/item/test/basic", then the following command will be: `npm run test.e2e src/components/item/test/basic`
      # - run multiple specified components based on the space-separated value
      # -- For example: if the `component` value is "item basic", then the following command will be: `npm run test.e2e item basic`
      # -- For example: if the `component` value is "src/components/item/test/basic src/components/item/test/a11y", then the following command will be: `npm run test.e2e src/components/item/test/basic src/components/item/test/a11y`
      #
      # If the `component` variable is not set, then the test will run all the instances of the components in the `src/components` folder.
      # - For example: `npm run test.e2e`
      #
      # More common options can be found at the Playwright Command line page: https://playwright.dev/docs/test-cli
      run: npm run test.e2e ${{ inputs.component }} -- --shard=${{ inputs.shard }}/${{ inputs.totalShards }}
      shell: bash
      working-directory: ./core
    - name: Test and Update
      id: test-and-update
      if: inputs.update == 'true'
      # Keep track of the files that were
      # changed so they can be correctly restored
      # in the combine step.
      # To do this, we move only the changed files
      # to a separate directory, while preserving the
      # directory structure of the source.
      # When, we create and archive of these results
      # so that the combine step can simply
      # unzip and move the changed files into place.
      # We have extra logic added so that job runners
      # that do not have any new screenshots do not create
      # an unnecessary .zip.
      # Note that we need to unzip directory to be "core"
      # which is why we not using the upload-archive
      # composite step here.
      run: |
        npm run test.e2e ${{ steps.set-test-file.outputs.testFile }} -- --shard=${{ inputs.shard }}/${{ inputs.totalShards }} --update-snapshots
        git add src/\*.png --force
        mkdir updated-screenshots
        cd ../ && rsync -R --progress $(git diff --name-only --cached) core/updated-screenshots
        if [ -d core/updated-screenshots/core ]; then
          echo "hasUpdatedScreenshots=$(echo 'true')" >> $GITHUB_OUTPUT
          cd core/updated-screenshots
          zip -q -r ../../UpdatedScreenshots-${{ inputs.shard }}-${{ inputs.totalShards }}.zip core
        fi
      shell: bash
      working-directory: ./core
    - name: Archive Updated Screenshots
      if: inputs.update == 'true' && steps.test-and-update.outputs.hasUpdatedScreenshots == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: updated-screenshots-${{ inputs.shard }}-${{ inputs.totalShards }}
        path: UpdatedScreenshots-${{ inputs.shard }}-${{ inputs.totalShards }}.zip
    - name: Archive Test Results
      # The always() ensures that this step
      # runs even if the previous step fails.
      # We want the test results to be archived
      # even if the test fails in the previous
      # step, otherwise there would be no way
      # to debug these tests.
      if: always()
      uses: ./.github/workflows/actions/upload-archive
      with:
        name: test-results-${{ inputs.shard }}-${{ inputs.totalShards }}
        output: core/TestResults-${{ inputs.shard }}-${{ inputs.totalShards }}.zip
        paths: core/playwright-report
